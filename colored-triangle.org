#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:lisp :results "output silent"
#+PROPERTY: header-args:glsl :results "none"

* Colored triangle

This example demostrates how to draw classic colored triangle by passing vertex data into a pipeline.

** GLSL shaders

Lets define shaders we need to draw the triangle.

#+BEGIN_SRC glsl :tangle src/colored-triangle/vert.glsl
  #version 330

  in vec2 position;
  in vec4 color;

  out vec4 v_color;

  void main () {
    // No transofmations, just put the vertices on Z plane as is
    gl_Position = vec4(position, 0.0, 1.0);
    // And pass color data to fragment shader:
    // it will be interpolated for us automatically
    v_color = color;
  }
#+END_SRC

Fragment shader is simple too - we pass color data through unmodified directly into
the output.

#+BEGIN_SRC glsl :tangle src/colored-triangle/frag.glsl
  #version 330

  in vec4 v_color;

  out vec4 f_color;

  void main () {
    f_color = v_color;
  }
#+END_SRC


** Setup

Lets load all necessary code to continue working interactively in the REPL or within org-mode
#+BEGIN_SRC lisp
  (ql:quickload :hello-bodge-graphics)
#+END_SRC

Our package we are going to evaluate the code in:
#+BEGIN_SRC lisp :tangle src/colored-triangle/app.lisp
  (cl:defpackage :hello-bodge-graphics/colored-triangle
    (:use :cl :cl-bodge.engine :cl-bodge.graphics :cl-bodge.appkit :hello-bodge-graphics))
#+END_SRC

** Registering shaders

Here we telling =cl-bodge= where to find our shaders and what data we want to feed them.
#+BEGIN_SRC lisp :tangle src/colored-triangle/app.lisp
  (cl:in-package :hello-bodge-graphics/colored-triangle)

  (defshader (colored-triangle-vertex-shader
              (:sources (merge-project-path "src/colored-triangle/vert.glsl")))
    ;; here we specify shader inputs

    ;; name of the position attribute in our vertex shader is, well, position
    (position :name "position")
    ;; color is color
    (color :name "color"))


  (defshader (colored-triangle-fragment-shader
              (:sources (merge-project-path "src/colored-triangle/frag.glsl"))
              ;; our fragment shader doesn't have any inputs
              ))
#+END_SRC

** Defining a pipeline

Now to pipeline. By default, pipeline expects triangles as a primitive, but we would explicitly
specify it here just for the sake of the example.


#+BEGIN_SRC lisp :tangle src/colored-triangle/app.lisp
  (cl:in-package :hello-bodge-graphics/colored-triangle)

  (defpipeline (colored-triangle-pipeline
                ;; explicitly tell our pipeline to treat our input as triangles
                (:primitive :triangles))
    :vertex colored-triangle-vertex-shader
    :fragment colored-triangle-fragment-shader)
#+END_SRC

** Application, pipeline initialization and vertex data

Lets define an application to render our example in.

#+BEGIN_SRC lisp :tangle src/colored-triangle/app.lisp
  (cl:in-package :hello-bodge-graphics/colored-triangle)

  (defapp colored-triangle-graphics ()
    ((pipeline :initform nil)
     (position-buffer :initform nil)
     (color-buffer :initform nil))
    (:viewport-title "Hello Colorful Triangle")
    (:viewport-width 800)
    (:viewport-height 600))

  (defmethod configuration-flow ((this colored-triangle-graphics))
    (with-slots (pipeline position-buffer color-buffer) this
      (for-graphics ()
        (setf pipeline (make-shader-pipeline 'colored-triangle-pipeline)
              position-buffer (make-array-buffer #2A((-0.5 -0.5)
                                                     (0.5 -0.5)
                                                     (0 0.5)))
              color-buffer (make-array-buffer #2A((1.0 0.0 0.0 1.0)
                                                  (0.0 1.0 0.0 1.0)
                                                  (0.0 0.0 1.0 1.0)))))))

  (defmethod sweeping-flow ((this colored-triangle-graphics))
    (with-slots (pipeline position-buffer color-buffer) this
      (for-graphics ()
        (dispose pipeline)
        (dispose position-buffer)
        (dispose color-buffer))))

  (defun run-example ()
    (start 'colored-triangle-graphics))

  (export 'run-example)
#+END_SRC

** Rendering a pipeline

#+BEGIN_SRC lisp :tangle src/colored-triangle/app.lisp
  (cl:in-package :hello-bodge-graphics/colored-triangle)

  (defmethod draw ((this colored-triangle-graphics))
    (with-slots (pipeline color-buffer position-buffer) this
      (render t pipeline
              :vertex-count 3
              'position position-buffer
              'color color-buffer)))
#+END_SRC
